package policymaker

/*The naming of the api methods does not map always to sensible IAM
actions. This map is used to resolve some of the inconsistencies of the AWS golang sdk
*/
var awsIdiosyncracyActionMap = map[string][]string{
	"apigateway:CreateAuthorizer":           []string{"apigateway:*"},
	"apigateway:CreateModel":                []string{"apigateway:*"},
	"apigateway:CreateResource":             []string{"apigateway:*"},
	"apigateway:CreateRestApi":              []string{"apigateway:*"},
	"apigateway:DeleteAuthorizer":           []string{"apigateway:*"},
	"apigateway:DeleteGatewayResponse":      []string{"apigateway:*"},
	"apigateway:DeleteIntegration":          []string{"apigateway:*"},
	"apigateway:DeleteIntegrationResponse":  []string{"apigateway:*"},
	"apigateway:DeleteMethod":               []string{"apigateway:*"},
	"apigateway:DeleteMethodResponse":       []string{"apigateway:*"},
	"apigateway:DeleteModel":                []string{"apigateway:*"},
	"apigateway:DeleteResource":             []string{"apigateway:*"},
	"apigateway:DeleteRestApi":              []string{"apigateway:*"},
	"apigateway:GetAuthorizer":              []string{"apigateway:*"},
	"apigateway:GetGatewayResponse":         []string{"apigateway:*"},
	"apigateway:GetIntegration":             []string{"apigateway:*"},
	"apigateway:GetIntegrationResponse":     []string{"apigateway:*"},
	"apigateway:GetMethod":                  []string{"apigateway:*"},
	"apigateway:GetMethodResponse":          []string{"apigateway:*"},
	"apigateway:GetModel":                   []string{"apigateway:*"},
	"apigateway:GetResource":                []string{"apigateway:*"},
	"apigateway:GetResourcesPages":          []string{"apigateway:*"},
	"apigateway:GetRestApi":                 []string{"apigateway:*"},
	"apigateway:PutGatewayResponse":         []string{"apigateway:*"},
	"apigateway:PutIntegration":             []string{"apigateway:*"},
	"apigateway:PutIntegrationResponse":     []string{"apigateway:*"},
	"apigateway:PutMethod":                  []string{"apigateway:*"},
	"apigateway:PutMethodResponse":          []string{"apigateway:*"},
	"apigateway:PutRestApi":                 []string{"apigateway:*"},
	"apigateway:UpdateAuthorizer":           []string{"apigateway:*"},
	"apigateway:UpdateIntegration":          []string{"apigateway:*"},
	"apigateway:UpdateMethod":               []string{"apigateway:*"},
	"apigateway:UpdateMethodResponse":       []string{"apigateway:*"},
	"apigateway:UpdateModel":                []string{"apigateway:*"},
	"apigateway:UpdateResource":             []string{"apigateway:*"},
	"apigateway:UpdateRestApi":              []string{"apigateway:*"},
	"apigateway:CreateBasePathMapping":      []string{"apigateway:*"},
	"apigateway:CreateDeployment":           []string{"apigateway:*"},
	"apigateway:CreateDomainName":           []string{"apigateway:*"},
	"apigateway:DeleteBasePathMapping":      []string{"apigateway:*"},
	"apigateway:DeleteDeployment":           []string{"apigateway:*"},
	"apigateway:DeleteDomainName":           []string{"apigateway:*"},
	"apigateway:DeleteStage":                []string{"apigateway:*"},
	"apigateway:GetAccount":                 []string{"apigateway:*"},
	"apigateway:GetBasePathMapping":         []string{"apigateway:*"},
	"apigateway:GetDeployment":              []string{"apigateway:*"},
	"apigateway:GetDomainName":              []string{"apigateway:*"},
	"apigateway:GetStage":                   []string{"apigateway:*"},
	"apigateway:UpdateAccount":              []string{"apigateway:*"},
	"apigateway:UpdateDeployment":           []string{"apigateway:*"},
	"apigateway:UpdateDomainName":           []string{"apigateway:*"},
	"cloudfront:CreateDistributionWithTags": []string{"cloudfront:TagResource", "cloudfront:CreateDistribution", "cloudfront:CreateDistributionWithTags"},
	"iam:ListAttachedRolePoliciesPages":     []string{"iam:ListAttachedRolePolicies"},
	"iam:ListEntitiesForPolicyPages":        []string{"iam:ListEntitiesForPolicy"},
	"iam:ListRolePoliciesPages":             []string{"iam:ListRolePolicies"},
	"route53:ListResourceRecordSetsPages":   []string{"route53:ListResourceRecordSets"},
	"s3:DeleteBucketCors":                   []string{},
	"s3:DeleteBucketEncryption":             []string{},
	"s3:DeleteBucketLifecycle":              []string{},
	"s3:DeleteBucketReplication":            []string{},
	"s3:DeleteObjects":                      []string{"s3:DeleteObject"},
	"s3:GetBucketAccelerateConfiguration":   []string{"s3:GetAccelerateConfiguration"},
	"s3:GetBucketEncryption":                []string{"s3:GetEncryptionConfiguration"},
	"s3:GetBucketLifecycleConfiguration":    []string{"s3:GetLifecycleConfiguration"},
	"s3:GetBucketReplication":               []string{"s3:GetReplicationConfiguration"},
	"s3:HeadObject":                         []string{"s3:GetObject"},
	"s3:HeadBucket":                         []string{"s3:HeadBucket", "s3:ListBucket"},
	"s3:ListObjectVersions":                 []string{"s3:GetObjectVersion"},
	"s3:PutBucketAccelerateConfiguration":   []string{"s3:PutAccelerateConfiguration"},
	"s3:PutBucketEncryption":                []string{"s3:PutEncryptionConfiguration"},
	"s3:PutBucketLifecycleConfiguration":    []string{"s3:PutLifecycleConfiguration"},
	"s3:PutBucketReplication":               []string{"s3:PutReplicationConfiguration"},
}

/*
This maps the connection client object instantianted in terraform-provider-aws
to the name of the service, which will be used to construct the appropriate IAM action
*/
var awsClientMap = map[string]string{
	"appmeshconn":            "appmesh",
	"transferconn":           "transfer",
	"shieldconn":             "shield",
	"servicequotasconn":      "servicequotas",
	"securityhubconn":        "securityhub",
	"sagemakerconn":          "sagemaker",
	"s3controlconn":          "s3control",
	"route53resolverconn":    "route53resolver",
	"resourcegroupsconn":     "resourcegroups",
	"ramconn":                "ram",
	"quicksightconn":         "quicksight",
	"mediapackageconn":       "mediapackage",
	"licensemanagerconn":     "licensemanager",
	"kinesisanalyticsconn":   "kinesisanalytics",
	"globalacceleratorconn":  "globalaccelerator",
	"docdbconn":              "docdb",
	"dlmconn":                "dlm",
	"datasyncconn":           "datasync",
	"costandusagereportconn": "costandusagereport",
	"backupconn":             "backup",
	"worklinkconn":           "worklink",
	"xrayconn":               "xray",
	"kafkaconn":              "kafka",
	"cloudhsmv2conn":         "cloudhsm",
	"cfconn":                 "cloudformation",
	"cloud9conn":             "cloud9",
	"cloudfrontconn":         "cloudfront",
	"cloudtrailconn":         "cloudtrail",
	"cloudwatchconn":         "cloudwatch",
	"cloudwatchlogsconn":     "logs",
	"cloudwatcheventsconn":   "events",
	"cognitoconn":            "cognito-identity",
	"cognitoidpconn":         "cognito-idp",
	"configconn":             "config",
	"daxconn":                "dax",
	"devicefarmconn":         "devicefarm",
	"dmsconn":                "dms",
	"dsconn":                 "ds",
	"dynamodbconn":           "dynamodb",
	"ec2conn":                "ec2",
	"ecrconn":                "ecr",
	"ecsconn":                "ecs",
	"efsconn":                "elasticfilesystem",
	"eksconn":                "eks",
	"elbconn":                "elasticloadbalancing",
	"elbv2conn":              "elasticloadbalancing",
	"emrconn":                "elasticmapreduce",
	"esconn":                 "es",
	"acmconn":                "acm",
	"acmpcaconn":             "acm-pca",
	"apigateway":             "apigateway",
	"appautoscalingconn":     "application-autoscaling",
	"autoscalingconn":        "autoscaling",
	"s3conn":                 "s3",
	"secretsmanagerconn":     "secretsmanager",
	"scconn":                 "servicecatalog",
	"sesConn":                "ses",
	"simpledbconn":           "sdb",
	"sqsconn":                "sqs",
	"stsconn":                "sts",
	"redshiftconn":           "redshift",
	"r53conn":                "route53",
	"rdsconn":                "rds",
	"iamconn":                "iam",
	"kinesisconn":            "kinesis",
	"kmsconn":                "kms",
	"gameliftconn":           "gamelift",
	"firehoseconn":           "firehose",
	"fmsconn":                "fms",
	"inspectorconn":          "inspector",
	"elasticacheconn":        "elasticache",
	"elasticbeanstalkconn":   "elasticbeanstalk",
	"elastictranscoderconn":  "elastictranscoder",
	"lambdaconn":             "lambda",
	"lightsailconn":          "lightsail",
	"macieconn":              "macie",
	"mqconn":                 "mq",
	"opsworksconn":           "opsworks",
	"organizationsconn":      "organizations",
	"glacierconn":            "glacier",
	"guarddutyconn":          "guardduty",
	"codebuildconn":          "codebuild",
	"codedeployconn":         "codedeploy",
	"codecommitconn":         "codecommit",
	"codepipelineconn":       "codedeploy",
	"sdconn":                 "servicediscovery",
	"sfnconn":                "states",
	"snsconn":                "sns",
	"sqdconn":                "sqs",
	"ssmconn":                "ssm",
	"storagegatewayconn":     "storagegateway",
	"swfconn":                "swf",
	"wafconn":                "waf",
	"wafregionalconn":        "waf-regional",
	"iotconn":                "iot",
	"batchconn":              "batch",
	"glueconn":               "glue",
	"athenaconn":             "athena",
	"dxconn":                 "directconnect",
	"mediastoreconn":         "mediastore",
	"appsyncconn":            "appsync",
	"lexmodelconn":           "lex",
	"budgetconn":             "budgets",
	"neptuneconn":            "neptune-db",
	"pricingconn":            "pricing",
	"pinpointconn":           "mobiletargeting",
	"workspacesconn":         "workspaces",
}
